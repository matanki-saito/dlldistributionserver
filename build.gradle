buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'
        kotlinVersion = "1.3.11"
        gradleGitPublishVersion = "2.1.1"
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.1")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")
        classpath("net.researchgate:gradle-release:2.6.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("de.undercouch:gradle-download-task:4.0.0")
        classpath("org.ajoberstar:gradle-git-publish:${gradleGitPublishVersion}")
    }
}

apply plugin: 'java'
apply plugin: "kotlin"
// plugin kotlin-kaptを入れないこと。lombokと干渉する
apply plugin: "kotlin-spring"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'net.researchgate.release'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.ajoberstar.git-publish'

group = 'com.popush'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

bootJar {
    baseName = 'triela-docker'
    version = '1.0.0'
}

// コメントに日本語があるので必要
javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

gitPublish {
    repoUri = "git@github.com:matanki-saito/documants.git"
    branch = 'gh-pages'

    repoDir = file("$buildDir/build/docs")

    contents {
        from 'javadoc'
        from 'schemaspydoc'
    }

    commitMessage = '[skip ci] Publishing a new page'
}

// このアプリケーションでは作れないので、別にあるサーバで生成する
// http://etc9.hatenablog.com/entry/2015/02/25/183902
task schemaspydoc {
    outputs.upToDateWhen { file('build/docs/schemadoc').exists() }
    doLast {
        def downloadedFile = new File(buildDir, 'downloaded/schemaspy.zip')
        download {
            src 'http://localhost:8080/download?host=127.0.0.1:3306&database=testdb&user=root&pass=1qaz2wsx'
            dest downloadedFile
        }
        copy {
            from zipTree(downloadedFile)
            into new File(projectDir, 'build/docs/schemadoc')
        }
    }
}

docker {
    name "gnagaoka/triela-app:" + version
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

release {
    // [skip ci]をコメントに入れないと、無限ループする
    preTagCommitMessage = '[skip ci] [Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[skip ci] [Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[skip ci] [Gradle Release Plugin] - new version commit: '
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    //implementation('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.5.RELEASE')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.7')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.retry:spring-retry')
    implementation('com.squareup.okhttp3:okhttp:3.11.0')
    implementation('com.squareup.retrofit2:retrofit:2.5.0')
    implementation('com.squareup.retrofit2:converter-jackson:2.5.0')
    implementation('com.github.ben-manes.caffeine:caffeine')
    implementation('org.slf4j:slf4j-api:1.7.25')
    implementation('io.springfox:springfox-swagger-ui:2.8.0')
    implementation('io.springfox:springfox-swagger2:2.8.0')
    implementation('com.github.napstr:logback-discord-appender:1.0.0')
    implementation('software.amazon.awssdk:s3')
    implementation('org.springframework.session:spring-session-data-redis')
    implementation('io.lettuce:lettuce-core:5.1.4.RELEASE')
    implementation("org.jetbrains.kotlin:kotlin-stdlib")

    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('mysql:mysql-connector-java')
    compileOnly('org.springframework.boot:spring-boot-starter-actuator')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.projectlombok:lombok')

    testImplementation('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('com.squareup.okhttp3:mockwebserver:3.11.0')
    testImplementation('org.mybatis.spring.boot:mybatis-spring-boot-starter-test:1.3.2')
    testImplementation('org.assertj:assertj-core:3.12.0')

}

dependencyManagement {
    imports {
        mavenBom 'software.amazon.awssdk:bom:2.3.7'
    }
}
