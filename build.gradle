buildscript {
    ext.versions = [
            // Spring
            'springBootVersion'                 : '2.4.5',

            // OR mapper
            // https://mybatis.org/mybatis-3/ja/
            'mybatisSpringBootStater'           : '2.1.2',

            // redis client 実装
            // https://lettuce.io/
            'lettuce'                           : '6.1.1.RELEASE',

            // http client
            // https://square.github.io/okhttp/
            'okhttp'                            : '4.9.1',
            'retrofit'                          : '2.9.0',

            // aws library
            // https://github.com/aws/aws-sdk-java-v2/
            'awssdk'                            : '2.11.12',

            // apache common library. hmacの算出に使用
            // https://commons.apache.org/
            'apacheCommonCodec'                 : '1.13',

            // log
            // http://www.slf4j.org/
            'slf4jApi'                          : '1.7.30',

            // エラーDiscord通知
            // https://github.com/napstr/logback-discord-appender
            'logbackDiscord'                    : '1.0.0',

            // 日付処理用
            // https://qiita.com/tag1216/items/25a64bba2bde98ea88d3
            'jacksonDatatypeJsr310'             : '2.9.7',

            // githubのリリースを登録するのに必要
            // https://github.com/ajoberstar/gradle-git-publish
            'gradleGitPublishPlugin'            : "2.1.3",

            // Dockerhubにdocker imageをuploadするのに必要
            // https://github.com/palantir/gradle-docker
            'gradleDockerPlugin'                : "0.26.0",

            // schemaspyで作った結果をダウンロードするのに必要
            // https://github.com/michel-kraemer/gradle-download-task
            'gradleDownloadTaskletPlugin'       : '4.1.1',

            // actuator apiでコミットversionを確認する
            // https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties
            'gradleGitPropertiesGeneraterPlugin': '2.3.1',

            // リリース処理に必要
            // https://github.com/researchgate/gradle-release
            'gradleReleasePlugin'               : '2.6.0',

            // awsのbomのために必要
            // https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/
            'gradleDependencyManagementPlugin'  : '1.0.6.RELEASE',

            // test用
            // https://assertj.github.io/doc/
            'assertj'                           : '3.19.0',

            // lombok
            //
            'lombok'                            : '1.18.20',

            // アクセスログを標準出力に吐き出す
            // https://github.com/akihyro/logback-access-spring-boot-starter
            // https://qiita.com/mito1213/items/0d9394d75dbd5642f37d
            'accessLog'                         : '3.0.0',

            // grpc用。サービス間通信で使う
            // https://github.com/google/protobuf-gradle-plugin
            // https://github.com/LogNet/grpc-spring-boot-starter
            // https://grpc.io/
            // https://github.com/grpc/grpc-java
            'protobufPlugin'                    : '0.8.8',
            'grpcSpringStarter'                 : '3.5.7',
            'grpc'                              : '3.12.0',
            'grpcGenJava'                       : '1.31.1',

            // micrometer
            // spring actuatorがprometheus形式でmetrixを出力するために必要
            'micrometer'                        : '1.7.5',

            // mysql connector for java
            // TODO: Version uPの時にconnectionTimeZone=SERVERの対応する
            'mysqlj'                            : '8.0.20'
    ]

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${versions.springBootVersion}")
        classpath("com.palantir.gradle.docker:gradle-docker:${versions.gradleDockerPlugin}")
        classpath("io.spring.gradle:dependency-management-plugin:${versions.gradleDependencyManagementPlugin}")
        classpath("net.researchgate:gradle-release:${versions.gradleReleasePlugin}")
        classpath("de.undercouch:gradle-download-task:${versions.gradleDownloadTaskletPlugin}")
        classpath("org.ajoberstar:gradle-git-publish:${versions.gradleGitPublishPlugin}")
        classpath("com.gorylenko.gradle-git-properties:gradle-git-properties:${versions.gradleGitPropertiesGeneraterPlugin}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${versions.protobufPlugin}")
        classpath("gradle.plugin.ua.eshepelyuk:ManifestClasspath:1.0.0")
    }
}

// windowsのCreateProcess error=206への対応
apply plugin: "ua.eshepelyuk.ManifestClasspath"

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'net.researchgate.release'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'com.google.protobuf'


group = 'com.popush'
sourceCompatibility = 15
targetCompatibility = 15

gitProperties {
    customProperty 'version', version
}

// Java 14のtext blockを使用する
tasks.withType(JavaCompile) {
    options.compilerArgs += ['--enable-preview']
    options.encoding = 'UTF-8'
}
test {
    jvmArgs(['--enable-preview'])
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
}

bootJar {
    archiveBaseName = 'triela-docker'
    archiveVersion = '1.0.0'
}

// コメントに日本語があるので必要
javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
}
javadoc.options {
    addBooleanOption('-enable-preview', true)
    addStringOption('-release', '15')
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

gitPublish {
    repoUri = "git@github.com:matanki-saito/dlldistributionserver.git"
    branch = 'master'

    contents {
        from(javadoc) {
            into 'docs/javadoc'
        }
        from("$buildDir/docs/schemadoc") {
            into "docs/schemadoc"
        }
    }

    preserve {
        include '**'
        exclude 'docs'
    }

    commitMessage = '[skip ci] Publishing a new page'
}

// このアプリケーションでは作れないので、別にあるサーバで生成する
// http://etc9.hatenablog.com/entry/2015/02/25/183902
task schemaspydoc {
    outputs.upToDateWhen { file('build/docs/schemadoc').exists() }
    doLast {
        def downloadedFile = new File(buildDir, 'downloaded/schemaspy.zip')
        download {
            src 'http://localhost:8080/download?host=127.0.0.1:3306&database=testdb&user=root&pass=1qaz2wsx'
            dest downloadedFile
        }
        copy {
            from zipTree(downloadedFile)
            into new File(projectDir, 'build/docs/schemadoc')
        }
    }
}

docker {
    name "gnagaoka/triela-app:" + version
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

// junit 5対策
// https://stackoverflow.com/questions/30474767/no-tests-found-for-given-includes-error-when-running-parameterized-unit-test-in
test {
    useJUnitPlatform()
}

release {
    // [skip ci]をコメントに入れないと、無限ループする
    preTagCommitMessage = '[skip ci] [Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[skip ci] [Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[skip ci] [Gradle Release Plugin] - new version commit: '
}

dependencies {
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter-aop:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-cache:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-redis:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${versions.springBootVersion}")
    //implementation("org.springframework.boot:spring-boot-starter-data-jpa:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-security:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web:${versions.springBootVersion}")
    //implementation("org.springframework.boot:spring-boot-starter-jdbc:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${versions.springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client:${versions.springBootVersion}")

    // spring
    implementation('org.springframework.session:spring-session-data-redis')

    // spring support
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${versions.mybatisSpringBootStater}")
    implementation("dev.akkinoc.spring.boot:logback-access-spring-boot-starter:${versions.accessLog}")
    implementation("io.github.lognet:grpc-spring-boot-starter:${versions.grpcSpringStarter}")

    // other
    implementation("io.micrometer:micrometer-registry-prometheus:${versions.micrometer}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jacksonDatatypeJsr310}")
    implementation("io.lettuce:lettuce-core:${versions.lettuce}")
    implementation("com.squareup.okhttp3:okhttp:${versions.okhttp}")
    implementation("com.squareup.retrofit2:retrofit:${versions.retrofit}")
    implementation("com.squareup.retrofit2:converter-jackson:${versions.retrofit}")
    implementation('com.github.ben-manes.caffeine:caffeine')
    implementation("org.slf4j:slf4j-api:${versions.slf4jApi}")
    implementation("com.github.napstr:logback-discord-appender:${versions.logbackDiscord}")
    implementation('software.amazon.awssdk:s3')
    implementation("commons-codec:commons-codec:${versions.apacheCommonCodec}")

    runtimeOnly("mysql:mysql-connector-java:${versions.mysqlj}")
    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    // lombokにはcompileOnly,annotationProcessor,testImplementationが必要
    // https://medium.com/@tsuyoshiushio/gradle-5-0-with-lombok-and-spring-boot-e8ca564fc552
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    compileOnly("org.projectlombok:lombok:${versions.lombok}")
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation("org.projectlombok:lombok:${versions.lombok}")
    testImplementation("com.squareup.okhttp3:mockwebserver:${versions.okhttp}")
    testImplementation("org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${versions.mybatisSpringBootStater}")
    testImplementation("org.assertj:assertj-core:${versions.assertj}")
}

dependencyManagement {
    imports {
        mavenBom "software.amazon.awssdk:bom:${versions.awssdk}"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${versions.grpc}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpcGenJava}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// for IDEA
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
